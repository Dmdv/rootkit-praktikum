Rootkit Programming - Rootkit detector for Rootkit of gruppe1

You should have received the following files:
* README
* detector.py
* createSysmap.sh
* mod.c
* Makefile

To run the detector, simply type "python detector.py". We tested it using
Python 2.6.6.
This compiles the detector module, inserts it, does some checking, parses
the output, and finally removes the detector module again.

A remark: When you run the python detector, you'll see some lines. Note 
that these lines do come from different sources: Some of them are pure
Python output (written to stdout), whereas others come directly from the
module (and are printed using KERN_ALERT). Thus, you should ensure that
both stdout and the KERN_ALERT messages are visible. This should be the 
default, but if you do not trust completely what you see when running 
"python detector.py", you can have a look at dmesg.

So, if the output seems kinda weird, you can do the following manually:
> make
> insmod mod.ko
> ss -t -a
> rmmod mod

The detector detects the following:
* We check whether the read-system-call is hooked. This is done by simply
  comparing the first three bytes of the memory location pointed to by
  sys_read. 
  Moreover, we have a *heuristic* check that is based on the address in
  the system call table. Note that this heuristic check may not be one
  hundret percent accurate (it is only a heuristic, as said).
* We check if there are hidden processes. This can be done quite easily,
  since process hiding is implemented by setting the process ID to 0. 
  Thus, we can simply look for a process with PID 0.
* We check if there are hidden TCP sockets. Therefore, we hook the
  (probably already hooked) socketcall-system-call. We do the same checks
  as the malware-socketcall and just manipulate the important case which 
  is altered by the rootkit. Then, the call "ss -t -a" displays TCP 
  sockets that are intended to be hidden by the rootkit.